---
title: "Contingency tables"
author: "Mauricio Garnier-Villarreal"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: gfm
toc: true
toc-depth: 5
code-copy: true
execute:
  cache: true
---

# Introduction

Contingency tables are very useful to condense a large number of observations into smaller manageble tables. A contingency table shows the distribution of a variable in the rows and another in its columns. They are not only useful for condensing data, but they also show the relations between variables. They are a way of summarizing categorical variables.

In this tutorials we will cover how to estimate contingency tables, the respective effect sizes, and plots to help with interpretation

# Set up the R Session

When we start working in R, we always need to setup our session. For this we need to set our working directory. You should set it for the folder that holds the data set. 

```{r, eval=F, error=F}
setwd("~path_to_your_file")
```

The next step for setting up our session will be to load the packages that we will be using. We will use a packages like `car` for data management, as well as the `rio` package for importing our data. Additionally, we need the `summarytools` for calculation of marginal probabilities, `effectsize` to calculate the effect sizes, and the `ggplot2` packages for plots. Note that you potentially need to install some of these packages, however.

```{r}
#| echo: true
#| code-fold: false
#| eval: true
#| warning: false


library(rio)
library(summarytools)
library(ggplot2)
library(effectsize)
library(car)
```

# Import the Dataset


```{r}
#| echo: true
#| code-fold: false
#| eval: true
#| warning: false


dat <- import("education.sav")
head(dat)
dim(dat)

```

Or if you want to pull it from the github site

```{r, eval=F}
dat <- import("https://github.com/maugavilla/well_hello_stats/raw/main/tutorials/education.sav")
head(dat)
dim(dat)
```

In this data set we have the sex and education level of the participants. And the education level is set with two different catrgorizations. We can see the label for each value (number) with the ``attributes()`` function

```{r}
#| echo: true
#| code-fold: false
#| eval: true
#| warning: false

attributes(dat$sex_fac)

attributes(dat$EDU_fac)

attributes(dat$EDU_fac_2)
```

We see that for ``EDU_fac`` we have 5 levels of education, and for ``EDU_fac_2`` we have only 2. In practice you should use the education variable to use in function of the research question, and the level of detail that you are interested in.

## Data prepration

For this tutorial we will use the ``sex_fac``  and ``EDU_fac`` variables. We first will change the numerical values for interpretable text values. This for two reasons, first will give show us the meaningful labels in the output (making it easier to read), and force ``R`` to treat the variables as categorical, preventing user errors. 

We will use the ``recode()`` function to recode them into the new varoables ``SEX`` and ``EDU``

```{r}
#| echo: true
#| code-fold: false
#| eval: true
#| warning: false

dat$SEX <- recode(dat$sex_fac, "1='Men';2='Women' ")

dat$EDU <- recode(dat$EDU_fac, "1='1none to secondary';
                      2='2post secondary';
                      3='3Bachelor';
                      4='4Master';
                      5='5Doctoral' ")
```

And then with the ``freq()`` function we can see the frequency tables (including percentages) for each of the two vaeriables of interest

```{r}
#| echo: true
#| code-fold: false
#| eval: true
#| warning: false

freq(dat[,c("SEX","EDU")])
```

# Contingency tables

Now that we have prepared our data set, we can calculate our continegncy table. The basic table can be estimated with the ``table()`` function, by providing the 2 variables to it. The first variable will on the rows, and the second one on the columns. 

This table shows the counts of participants within each combination of characterictics, like 503 men have a doctoral degree

```{r}
#| echo: true
#| code-fold: false
#| eval: true
#| warning: false

tab1 <- table(dat$EDU, dat$SEX)
tab1
```

## Marginal probabilities

But its not as easy to interpret the counts, because even when we see some differences. For this we can use marginal probabilities (proportions). For this we can use the ``ctable()`` function, provide the same 2 variables, and add the argument ``prop="r" `` to ask for *row* proportions

```{r}
#| echo: true
#| code-fold: false
#| eval: true
#| warning: false

ctable(dat$EDU, dat$SEX, prop="r")
```
With this you can interpret the proportion differences between column categories across each row category. For example, of all participants with a doctoral degree 55\% are men, and 45\% are women. 

Or we can change the argument to ``prop="r" `` to get *column* proportions. With this you can interpret the proportion differences between row categories across each column category. For example, of all men 57\% have **none to seconday** education, and a 1\% have a doctoral degree.

```{r}
#| echo: true
#| code-fold: false
#| eval: true
#| warning: false

ctable(dat$EDU, dat$SEX, prop="c")
```

Or, if you want to get the column and row totals without propostions can change the argument to ``prop="n" ``

```{r}
#| echo: true
#| code-fold: false
#| eval: true
#| warning: false

ctable(dat$EDU, dat$SEX, prop="n")
```


## $\chi^2$ contingency test

A $\chi^2$ contingency analysis allows us to test the null hypothesis that two categorical variables are independent of each other.

Because this is the easiest test to calculate by hand, it is one of the most common tests used. However, remember that the $\chi^2$ test is an approximation, and requires that all of the expected values are greater than 1 and that at least 80% are greater than 5, some would say that 100% should be above 5. When doing such a test of independence on a computer, it is probably better to use Fisher’s exact test, which doesn’t have this restriction.

The $\chi^2$ contingency test can be done with the function ``chisq.test()``. If we give a frequency table as input, this function will calculate the $\chi^2$ test for us.

Before we do the test, though, we need to make sure that the assumptions of the $\chi^2$ test are met by our data. Fortunately, the chisq.test() function also provides a way for us to look at the expected values. If we give a contigency table as input, and then add $expected at the end of the function, it will show us the expected values for a test of independence, like this:

```{r}
#| echo: true
#| code-fold: false
#| eval: true
#| warning: false

chisq.test(tab1)$expected
```

In this case all the expected values are greater than 5, so we have no problem meeting this assumption. Therefore, it is appropriate to do a $\chi^2$ contingency test. Just give a contingency table as input to the ``chisq.test()`` function to do this test. We’ve added the option ``correct = FALSE`` to tell R to not do a Yate’s correction, which can be overly conservative.

```{r}
#| echo: true
#| code-fold: false
#| eval: true
#| warning: false

chisq.test(tab1)
```

This output shows that the $\chi^2$ value for this test is 98.624, with 4 degree of freedom and a $p < .001$. So we can reject the null hypothesis of no association between sex and education level.

## Effect size

We need to also estimate measures of effect size, to improve the interpretation, as the null hypothesis tests do not provide information about the magnitude of the association. For this measure, we will use Cramer's $V$ as the effect size (Tomczak & Tomczak, 2014)

For this we can use the ``cramers_v()`` function, and just give it the contigency table

```{r}
#| echo: true
#| code-fold: false
#| eval: true
#| warning: false

cramers_v(tab1)
```

Cramer's $V$ is an association effect size that ranges between 0 (indicating no relationship) to 1 (indicating a perfect relationship). In this example we see that it is very close to 0 ($V = .04$) indicating an small effect size of the association

For a 2-by-2 contingency table you can calculate the Odds Ratio and Risk Ratio as effect size measures. For this example, we are first recoding education into a binary variable. From none to post seconday as category 1, and any college degrees as category 2

```{r}
#| echo: true
#| code-fold: false
#| eval: true
#| warning: false

dat$EDU2 <- recode(dat$EDU_fac, "1='1nonetosec';
                      2='1nonetosec';
                      3='2pastsec';
                      4='2pastsec';
                      5='2pastsec' ")
```

Then we first need to estimate the new contigency table with the new education variable. Then you can estimate the Odds Ratio and Risk Ratio with the respective functions

```{r}
#| echo: true
#| code-fold: false
#| eval: true
#| warning: false

tab22 <- table(dat$EDU2, dat$SEX)
tab22

chisq.test(tab22)

oddsratio(tab22)

riskratio(tab22)

```

## Plots

There are different ways to present plots for contigency tables, first we will see bar plots. This ones present the counts for each category. For this we can use the ``ggplot2`` package. If we provide the data frame, and only one categorical variable for the x-axis, we can present the bar plot for each variable

```{r}
#| echo: true
#| code-fold: false
#| eval: true
#| warning: false

ggplot(data=dat, aes(x=EDU))+
  geom_bar()

ggplot(data=dat, aes(x=SEX))+
  geom_bar()

```

Then, if we want to include both variables in the same plot, we can do it in a couple of different ways. In the first example, we have one variable in the x-axis, and use the ``facet_wrap`` function to create separate plots for each of the categories of the second variable.

On the second example, we have all participants in the same plot, but separate them by color (``fill``). And in the third example we do both, separate plots and different colors. 

```{r}
#| echo: true
#| code-fold: false
#| eval: true
#| warning: false

ggplot(data=dat, aes(x=EDU))+
  geom_bar()+
  facet_wrap(vars(SEX) )

ggplot(data=dat, aes(x=EDU, fill=SEX))+
  geom_bar()

ggplot(data=dat, aes(x=EDU, fill=SEX))+
  geom_bar()+
  facet_wrap(vars(SEX) )


```

Note that for the previous plots we have counts on the y-axis, but we can swith this for proportions. We can do this by adjusting the ``aes()`` function inside the ``geom_bar()`` function. With ``aes(y = ..count../sum(..count..))`` we specify that the y-axis should dive the counts by their total (making it a proportion)

```{r}
#| echo: true
#| code-fold: false
#| eval: true
#| warning: false

ggplot(data=dat, aes(x=EDU, fill=SEX))+
  geom_bar(aes(y = ..count../sum(..count..)))+
  facet_wrap(vars(SEX) )


```

Lastly, we can also use the mosaic plot, which is another graphical technique for showing the association between two categorical variables. Here, each combination of the variables is represented by a rectangle, and the size of the rectangle is proportional to the number of individuals in that combination.

R has a function to calculate mosaic plots, with the sensible name ``mosaicplot()``. In its most basic form, you just give it a contigency table as input.

```{r}
#| echo: true
#| code-fold: false
#| eval: true
#| warning: false

mosaicplot(tab1)

```

# References

Tomczak, M., & Tomczak, E. (2014). The need to report effect size estimates revisited. An overview of some recommended measures of effect size. TRENDS in Sport Sciences, 1(21), 19–25.
